{"version":3,"sources":["components/sidenav/Sidenav.js","models/GiftCard.js","services/GiftCardService.js","models/SidenavAction.js","services/SidenavActionsService.js","components/home-page/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Sidenav","className","GiftCard","avatarIcon","icon","label","price","min","max","this","headerIcon","setCards","giftCardsLabels","giftCardsIcons","giftCardsBgIcons","map","giftCardsPrices","giftCards","Array","fill","card","index","SidenavAction","active","setActions","icons","actions","setActive","HomePage","Fragment","heading","GiftCardGallery","GiftCardService","getNetflixCard","PageHeader","props","React","Component","getPrice","key","performance","now","SidenavActions","data-active","SidenavActionsService","action","getAction","getActions","BestSellerCard","getPriceRange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d421b78.chunk.js","sourcesContent":["import React from 'react';\nimport './Sidenav.css';\n\nexport default function Sidenav(){\n\n    return(\n        <div className=\"Sidenav positionAbsolute\"></div>\n    );\n\n}","export default class GiftCard{\n\n    label;\n    headerIcon;\n    avatarIcon;\n    price;\n    min;\n    max;\n    \n\n    constructor(avatarIcon, icon, label, price, min, max){\n        this.avatarIcon = avatarIcon;\n        this.headerIcon = icon;\n        this.label = label;\n        this.price = price;\n        this.min = min;\n        this.max = max;\n    }\n\n    getPrice(){\n        return `$${this.price}`;\n    }\n\n    getPriceRange(){\n        return `$${this.min} - $${this.max}`;\n    }\n}","import GiftCard from '../models/GiftCard';\n\nclass GiftCardService{\n    \n    giftCards;\n    \n    constructor(){\n        this.setCards();\n    }\n\n    setCards(){\n        let giftCardsLabels = [\"iTunes\", \"Netflix\", \"Amazon\", \"Amazon\"];\n        let giftCardsIcons = [\"apple\", \"netflix\", \"amazon\", \"amazon\"];\n        let giftCardsBgIcons = giftCardsIcons.map(icon => `/logos/${icon}.svg`);\n        giftCardsIcons = giftCardsIcons.map(icon => `ri-${icon}-fill`);\n\n        let giftCardsPrices = [100, 100, 200, 100];\n        let giftCards = new Array(3).fill(1);\n        giftCards = giftCards.map((card, index) => index);\n        this.giftCards = giftCards.map(card => new GiftCard(\n            giftCardsBgIcons[card], giftCardsIcons[card], \n            giftCardsLabels[card], giftCardsPrices[card],\n            10, giftCardsPrices[card]\n        ));\n    }\n\n    getAppleCard(){\n        return new GiftCard(\n            \"/logos/apple.svg\", \"ri-aplle-fill\",\n            \"iTunes\", \"100\", \"10\", \"100\"\n        );\n    }\n\n    getNetflixCard(){\n        return new GiftCard(\n            \"/logos/netflix.svg\", \"ri-netflix-fill\",\n            \"Netflix\", \"200\", \"10\", \"200\"\n        );\n    }\n\n    getAmazonCard(){\n        return new GiftCard(\n            \"/logos/amazon.svg\", \"ri-amazon-fill\",\n            \"Amazon\", \"100\", \"10\", \"100\"\n        );\n    }\n\n    getPrimeNowCard(){\n        return new GiftCard(\n            \"/logos/amazon.svg\", \"ri-amazon-fill\",\n            \"Amazon\", \"100\", \"10\", \"100\"\n        );\n    }\n\n}\n\nexport default new GiftCardService();","export default class SidenavAction{\n    \n    icon;\n    active;\n\n\n    constructor(icon, active){\n        this.icon = icon;\n        this.active = active;\n    }\n\n    setActive(active){\n        this.active = active;\n    }\n\n}","import SidenavAction from \"../models/SidenavAction\";\n\nclass SidenavActionsService{\n    actions;\n\n    constructor(){\n        this.setActions();\n    }\n\n    setActions(){\n        let labels = [\"Cards\", \"Sale\", \"Groups\", \"Settings\"];\n        let icons = [\"bank-card-2\", \"service\", \"group\", \"settings-2\"];\n        icons = icons.map(icon => `ri-${icon}-fill`);\n        this.actions = labels.map((label, index) => new SidenavAction(icons[index], false));\n        this.actions[0].setActive(true);\n    }\n\n}\n\nexport default new SidenavActionsService();","import React from 'react';\nimport './HomePage.css';\n\nimport Sidenav from '../sidenav/Sidenav';\nimport GiftCardService from '../../services/GiftCardService';\nimport SidenavActionsService from '../../services/SidenavActionsService';\n\nexport default function HomePage(){\n    return (\n        <React.Fragment>\n            <Sidenav />\n            <div className=\"HomePage\">\n                <PageHeader heading=\"Gift cards\" />\n                <GiftCardGallery />\n                <div className=\"row\">\n                    <SidenavActions />\n                    <BestSellerCard card={GiftCardService.getNetflixCard()} />\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nclass PageHeader extends React.Component{\n    \n    render(){\n        return(\n            <div className=\"PageHeader row centerV\">\n                <div className=\"heading\">{this.props.heading}</div>\n                <div className=\"fillParent\"></div>\n                <i className=\"ri-home-smile-fill\"></i>\n            </div>\n        );\n    }\n\n}\n\n\n\n\n/**\n * This  Component is used to render the Gift Cards Gallery\n * on Home Page of the app\n */\n\nfunction GiftCardGallery(){\n\n    function getCard(bgIcon, avatarIcon, label, price){\n        return (\n            <div className=\"Card column centerH positionRelatve\" key={performance.now()}>\n                {/* <div className=\"positionAbsolute\">\n                    <img src=\"logos/apple.svg\" alt=\"brand-icon\" aria-label=\"brand icon of gift card\"/>\n                </div> */}\n                <i className={avatarIcon}></i>\n                <div className=\"label positionRelative\">{label}</div>\n                <div className=\"price positionRelative\">{price}</div>\n            </div>\n        );\n    }\n\n    function getGiftCards(){\n        let giftCards = GiftCardService.giftCards;\n        return giftCards.map(card => getCard(\n            card.avatarIcon, card.headerIcon, \n            card.label, card.getPrice()\n        ));\n    }\n\n    return(\n        <div className=\"CardGallery\">\n            <div className=\"row centerV\">\n                <div className=\"heading\">Featured Gift cards</div>\n                {getGiftCards()}\n            </div>\n            <div className=\"navigator row centerV\">\n                <div className=\"separator\"></div>\n                <i className=\"ri-arrow-left-line\"></i>\n                <i className=\"ri-arrow-right-line\"></i>\n            </div>\n        </div>\n    );\n}\n\n\n\n\n\n\n\n\n/**\n * This Component is used ot render Sidenav actions on the Home Page\n * of the app\n */\n\nclass SidenavActions extends React.Component{\n    \n    getAction(icon, active){\n        return (\n            <div className=\"action positionRelative\" data-active={active} key={performance.now()}>\n                <i className={icon}></i>\n            </div>\n        );\n    }\n\n    getActions(){\n        return SidenavActionsService.actions.map(action => this.getAction(action.icon, action.active));\n    }\n    \n    render(){\n        return (\n            <div className=\"SidenavActions\">\n                {this.getActions()}\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * This Component is used to render Best Seller \n * card on the homepage of the app\n */\n\nclass BestSellerCard extends React.Component{\n    render(){\n        let card = this.props.card;\n        return(\n            <div className=\"BestSellerCard positionRelative\">\n                <div className=\"heading\">Best seller</div>\n                <div className=\"Card positionRelative\">\n                    <div className=\"headerIcon\"><i className={card.headerIcon}></i></div>\n                    <div className=\"label\">{card.label}</div>\n                    <div className=\"price positionRelative\">{card.getPriceRange()}</div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport HomePage from './components/home-page/HomePage';\n\nexport default class App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <HomePage/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts.css';\nimport App from './App';\nimport 'remixicon/fonts/remixicon.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}